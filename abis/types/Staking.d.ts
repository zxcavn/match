/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "AMOUNT_MULTIPLIER()": FunctionFragment;
    "INIT_MULTIPLIER_VALUE()": FunctionFragment;
    "ONE_YEAR_IN_SECS()": FunctionFragment;
    "VESTING_CONST()": FunctionFragment;
    "_totalSupplyBP()": FunctionFragment;
    "_totalSupplyLP()": FunctionFragment;
    "_totalSupplyST()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceBPOf(address)": FunctionFragment;
    "balanceLPOf(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceSTOf(address)": FunctionFragment;
    "compoundBP()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "exit()": FunctionFragment;
    "getNativeMultiplier()": FunctionFragment;
    "getNativeReward()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getTokenMultiplier()": FunctionFragment;
    "getUserData()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lastNativeUpdateTime()": FunctionFragment;
    "lastTimeNativeRewardApplicable()": FunctionFragment;
    "lastTimeTokenRewardApplicable()": FunctionFragment;
    "lastTokenUpdateTime()": FunctionFragment;
    "name()": FunctionFragment;
    "nativeMultiplierStored()": FunctionFragment;
    "nativePeriodFinish()": FunctionFragment;
    "nativeRewardRate()": FunctionFragment;
    "nativeRewardsDuration()": FunctionFragment;
    "notifyNativeRewardAmount(uint256)": FunctionFragment;
    "notifyTokenRewardAmount(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenMultiplierStored()": FunctionFragment;
    "tokenPeriodFinish()": FunctionFragment;
    "tokenRewardRate()": FunctionFragment;
    "tokenRewardsDuration()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyBP()": FunctionFragment;
    "totalSupplyLP()": FunctionFragment;
    "totalSupplyST()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userVariables(address)": FunctionFragment;
    "vest(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AMOUNT_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_MULTIPLIER_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_YEAR_IN_SECS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTING_CONST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalSupplyBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalSupplyLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalSupplyST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceBPOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceLPOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceSTOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "compoundBP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNativeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastNativeUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeNativeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeTokenRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTokenUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeMultiplierStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativePeriodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeRewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyNativeRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyTokenRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMultiplierStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPeriodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVariables",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vest", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AMOUNT_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_MULTIPLIER_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_YEAR_IN_SECS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_CONST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupplyBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupplyLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupplyST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceBPOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceLPOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceSTOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compoundBP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNativeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastNativeUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeNativeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeTokenRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTokenUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeMultiplierStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativePeriodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyNativeRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyTokenRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMultiplierStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPeriodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "NativeRewardAdded(uint256)": EventFragment;
    "NativeRewardPaid(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "TokenRewardAdded(uint256)": EventFragment;
    "TokenRewardPaid(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Vesting(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeRewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeRewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type NativeRewardAddedEvent = TypedEvent<
  [BigNumber] & { reward: BigNumber }
>;

export type NativeRewardPaidEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type TokenRewardAddedEvent = TypedEvent<
  [BigNumber] & { reward: BigNumber }
>;

export type TokenRewardPaidEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type VestingEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    AMOUNT_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    INIT_MULTIPLIER_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_YEAR_IN_SECS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VESTING_CONST(overrides?: CallOverrides): Promise<[number]>;

    _totalSupplyBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalSupplyLP(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalSupplyST(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceBPOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceLPOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceSTOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compoundBP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNativeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNativeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastNativeUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimeNativeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastTimeTokenRewardApplicable(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastTokenUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nativeMultiplierStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativePeriodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativeRewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativeRewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyNativeRewardAmount(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyTokenRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenMultiplierStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPeriodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenRewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenRewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyLP(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyST(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userVariables(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        userTokenMultiplierPaid: BigNumber;
        userNativeMultiplierPaid: BigNumber;
        userLastUpdateTime: BigNumber;
        balanceLP: BigNumber;
        balanceST: BigNumber;
        balanceBP: BigNumber;
        balanceNC: BigNumber;
        balanceVST: BigNumber;
        balanceVSTStored: BigNumber;
        rewards: BigNumber;
        vestingFinishTime: BigNumber;
      }
    >;

    vest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AMOUNT_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  INIT_MULTIPLIER_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_YEAR_IN_SECS(overrides?: CallOverrides): Promise<BigNumber>;

  VESTING_CONST(overrides?: CallOverrides): Promise<number>;

  _totalSupplyBP(overrides?: CallOverrides): Promise<BigNumber>;

  _totalSupplyLP(overrides?: CallOverrides): Promise<BigNumber>;

  _totalSupplyST(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceBPOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceLPOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceSTOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  compoundBP(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNativeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getNativeReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getUserData(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastNativeUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeNativeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeTokenRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastTokenUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nativeMultiplierStored(overrides?: CallOverrides): Promise<BigNumber>;

  nativePeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  nativeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  nativeRewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  notifyNativeRewardAmount(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyTokenRewardAmount(
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenMultiplierStored(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  tokenRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  tokenRewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyBP(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyLP(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyST(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userVariables(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      userTokenMultiplierPaid: BigNumber;
      userNativeMultiplierPaid: BigNumber;
      userLastUpdateTime: BigNumber;
      balanceLP: BigNumber;
      balanceST: BigNumber;
      balanceBP: BigNumber;
      balanceNC: BigNumber;
      balanceVST: BigNumber;
      balanceVSTStored: BigNumber;
      rewards: BigNumber;
      vestingFinishTime: BigNumber;
    }
  >;

  vest(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AMOUNT_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_MULTIPLIER_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_IN_SECS(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_CONST(overrides?: CallOverrides): Promise<number>;

    _totalSupplyBP(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupplyLP(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupplyST(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceBPOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceLPOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceSTOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    compoundBP(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exit(overrides?: CallOverrides): Promise<void>;

    getNativeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeReward(overrides?: CallOverrides): Promise<void>;

    getReward(overrides?: CallOverrides): Promise<void>;

    getTokenMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getUserData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastNativeUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeNativeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeTokenRewardApplicable(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTokenUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nativeMultiplierStored(overrides?: CallOverrides): Promise<BigNumber>;

    nativePeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    nativeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    nativeRewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    notifyNativeRewardAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyTokenRewardAmount(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenMultiplierStored(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyBP(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyLP(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyST(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userVariables(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        userTokenMultiplierPaid: BigNumber;
        userNativeMultiplierPaid: BigNumber;
        userLastUpdateTime: BigNumber;
        balanceLP: BigNumber;
        balanceST: BigNumber;
        balanceBP: BigNumber;
        balanceNC: BigNumber;
        balanceVST: BigNumber;
        balanceVSTStored: BigNumber;
        rewards: BigNumber;
        vestingFinishTime: BigNumber;
      }
    >;

    vest(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "NativeRewardAdded(uint256)"(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    NativeRewardAdded(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    "NativeRewardPaid(address,uint256)"(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    NativeRewardPaid(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Staked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Staked(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "TokenRewardAdded(uint256)"(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    TokenRewardAdded(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    "TokenRewardPaid(address,uint256)"(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    TokenRewardPaid(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Vesting(address,uint256)"(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    Vesting(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    "Withdrawn(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Withdrawn(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    AMOUNT_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_MULTIPLIER_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_IN_SECS(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_CONST(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupplyBP(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupplyLP(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupplyST(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceBPOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceLPOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceSTOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    compoundBP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNativeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getUserData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastNativeUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeNativeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeTokenRewardApplicable(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTokenUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nativeMultiplierStored(overrides?: CallOverrides): Promise<BigNumber>;

    nativePeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    nativeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    nativeRewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    notifyNativeRewardAmount(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyTokenRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMultiplierStored(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyBP(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyLP(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyST(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userVariables(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMOUNT_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INIT_MULTIPLIER_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_YEAR_IN_SECS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VESTING_CONST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalSupplyBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalSupplyLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalSupplyST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceBPOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceLPOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceSTOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compoundBP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNativeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastNativeUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeNativeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeTokenRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTokenUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeMultiplierStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativePeriodFinish(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeRewardsDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyNativeRewardAmount(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyTokenRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMultiplierStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPeriodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenRewardsDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userVariables(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
