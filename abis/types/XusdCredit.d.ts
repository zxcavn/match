/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface XusdCreditInterface extends ethers.utils.Interface {
  functions: {
    "XUSD()": FunctionFragment;
    "addCollateral()": FunctionFragment;
    "borrowFeePercentagePoint()": FunctionFragment;
    "calculateInterest(uint256,uint256)": FunctionFragment;
    "calculateLiquidationPrice(uint256,uint256)": FunctionFragment;
    "closePosition(address,uint256)": FunctionFragment;
    "collateralPriceDecimals()": FunctionFragment;
    "collateralRatio()": FunctionFragment;
    "createNewPosition(address,uint256,uint256,uint64)": FunctionFragment;
    "decimalsXUSD()": FunctionFragment;
    "getAccumulatedFees()": FunctionFragment;
    "getAccumulatedPenalties()": FunctionFragment;
    "getPosition(address)": FunctionFragment;
    "getPriceFeeds()": FunctionFragment;
    "getTotalDebt(address)": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "interestPercentagePoints()": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "liquidationBonusPercentagePoint()": FunctionFragment;
    "liquidationPenaltyPercentagePoint()": FunctionFragment;
    "liquidationRatio()": FunctionFragment;
    "mintToUser(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "precisionMultiplier()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayLoan(uint256)": FunctionFragment;
    "setMaxAmountToMint(uint256)": FunctionFragment;
    "setTestPrice(int256)": FunctionFragment;
    "takeAdditionalLoan(uint256)": FunctionFragment;
    "takeLoan(uint256)": FunctionFragment;
    "testPrice()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferOwnershipXUSD(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePosition(address,uint256,uint256,uint112,uint112)": FunctionFragment;
    "withdrawAccumelatedFees(address)": FunctionFragment;
    "withdrawAccumulatedPenalties(address)": FunctionFragment;
    "withdrawCollateralFromPosition(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "XUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowFeePercentagePoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPriceDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsXUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccumulatedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccumulatedPenalties",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPosition", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPriceFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestPercentagePoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidationBonusPercentagePoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPenaltyPercentagePoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintToUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "precisionMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAmountToMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeAdditionalLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "testPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipXUSD",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccumelatedFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccumulatedPenalties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateralFromPosition",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "XUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowFeePercentagePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPriceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalsXUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulatedPenalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestPercentagePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBonusPercentagePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPenaltyPercentagePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "precisionMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAmountToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeAdditionalLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipXUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccumelatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccumulatedPenalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateralFromPosition",
    data: BytesLike
  ): Result;

  events: {
    "ClosePosition(address,uint256,uint256)": EventFragment;
    "CreatePosition(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Liquidation(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdatePosition(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePosition"): EventFragment;
}

export type ClosePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    amount: BigNumber;
    timestamp: BigNumber;
  }
>;

export type CreatePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    liquidationPrice: BigNumber;
    collateralAmount: BigNumber;
    body: BigNumber;
    borrowFee: BigNumber;
    timestamp: BigNumber;
  }
>;

export type LiquidationEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    collateralAmount: BigNumber;
    body: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpdatePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    newLiquidationPrice: BigNumber;
    newCollateralAmount: BigNumber;
    newBody: BigNumber;
    newInterest: BigNumber;
    newBorrowFee: BigNumber;
    timestamp: BigNumber;
  }
>;

export class XusdCredit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: XusdCreditInterface;

  functions: {
    XUSD(overrides?: CallOverrides): Promise<[string]>;

    addCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowFeePercentagePoint(overrides?: CallOverrides): Promise<[number]>;

    calculateInterest(
      _body: BigNumberish,
      _lastUpdateTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateLiquidationPrice(
      amountXUSD: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralPriceDecimals(overrides?: CallOverrides): Promise<[number]>;

    collateralRatio(overrides?: CallOverrides): Promise<[number]>;

    createNewPosition(
      _sender: string,
      _collateralAmount: BigNumberish,
      _body: BigNumberish,
      _liquidationPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimalsXUSD(overrides?: CallOverrides): Promise<[number]>;

    getAccumulatedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccumulatedPenalties(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPosition(
      positionOwner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          isInitialized: boolean;
          creationTime: number;
          lastUpdateTime: number;
          liquidationPrice: BigNumber;
          interest: BigNumber;
          borrowFee: BigNumber;
          collateralAmount: BigNumber;
          body: BigNumber;
        }
      ]
    >;

    getPriceFeeds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDebt(
      _position: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      _xusdAddress: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestPercentagePoints(overrides?: CallOverrides): Promise<[number]>;

    liquidate(
      positionOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationBonusPercentagePoint(
      overrides?: CallOverrides
    ): Promise<[number]>;

    liquidationPenaltyPercentagePoint(
      overrides?: CallOverrides
    ): Promise<[number]>;

    liquidationRatio(overrides?: CallOverrides): Promise<[number]>;

    mintToUser(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    precisionMultiplier(overrides?: CallOverrides): Promise<[number]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      amountXUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAmountToMint(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTestPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeAdditionalLoan(
      amountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeLoan(
      amountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnershipXUSD(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePosition(
      owner: string,
      newCollateralAmount: BigNumberish,
      newBody: BigNumberish,
      newInterest: BigNumberish,
      newBorrowFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAccumelatedFees(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAccumulatedPenalties(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateralFromPosition(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  XUSD(overrides?: CallOverrides): Promise<string>;

  addCollateral(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowFeePercentagePoint(overrides?: CallOverrides): Promise<number>;

  calculateInterest(
    _body: BigNumberish,
    _lastUpdateTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateLiquidationPrice(
    amountXUSD: BigNumberish,
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    owner: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralPriceDecimals(overrides?: CallOverrides): Promise<number>;

  collateralRatio(overrides?: CallOverrides): Promise<number>;

  createNewPosition(
    _sender: string,
    _collateralAmount: BigNumberish,
    _body: BigNumberish,
    _liquidationPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimalsXUSD(overrides?: CallOverrides): Promise<number>;

  getAccumulatedFees(overrides?: CallOverrides): Promise<BigNumber>;

  getAccumulatedPenalties(overrides?: CallOverrides): Promise<BigNumber>;

  getPosition(
    positionOwner: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isInitialized: boolean;
      creationTime: number;
      lastUpdateTime: number;
      liquidationPrice: BigNumber;
      interest: BigNumber;
      borrowFee: BigNumber;
      collateralAmount: BigNumber;
      body: BigNumber;
    }
  >;

  getPriceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDebt(
    _position: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _xusdAddress: string,
    _priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestPercentagePoints(overrides?: CallOverrides): Promise<number>;

  liquidate(
    positionOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationBonusPercentagePoint(overrides?: CallOverrides): Promise<number>;

  liquidationPenaltyPercentagePoint(overrides?: CallOverrides): Promise<number>;

  liquidationRatio(overrides?: CallOverrides): Promise<number>;

  mintToUser(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  precisionMultiplier(overrides?: CallOverrides): Promise<number>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    amountXUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAmountToMint(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTestPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeAdditionalLoan(
    amountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeLoan(
    amountOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testPrice(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnershipXUSD(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePosition(
    owner: string,
    newCollateralAmount: BigNumberish,
    newBody: BigNumberish,
    newInterest: BigNumberish,
    newBorrowFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAccumelatedFees(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAccumulatedPenalties(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateralFromPosition(
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    XUSD(overrides?: CallOverrides): Promise<string>;

    addCollateral(overrides?: CallOverrides): Promise<void>;

    borrowFeePercentagePoint(overrides?: CallOverrides): Promise<number>;

    calculateInterest(
      _body: BigNumberish,
      _lastUpdateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationPrice(
      amountXUSD: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      owner: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralPriceDecimals(overrides?: CallOverrides): Promise<number>;

    collateralRatio(overrides?: CallOverrides): Promise<number>;

    createNewPosition(
      _sender: string,
      _collateralAmount: BigNumberish,
      _body: BigNumberish,
      _liquidationPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimalsXUSD(overrides?: CallOverrides): Promise<number>;

    getAccumulatedFees(overrides?: CallOverrides): Promise<BigNumber>;

    getAccumulatedPenalties(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      positionOwner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isInitialized: boolean;
        creationTime: number;
        lastUpdateTime: number;
        liquidationPrice: BigNumber;
        interest: BigNumber;
        borrowFee: BigNumber;
        collateralAmount: BigNumber;
        body: BigNumber;
      }
    >;

    getPriceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(
      _position: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _xusdAddress: string,
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestPercentagePoints(overrides?: CallOverrides): Promise<number>;

    liquidate(positionOwner: string, overrides?: CallOverrides): Promise<void>;

    liquidationBonusPercentagePoint(overrides?: CallOverrides): Promise<number>;

    liquidationPenaltyPercentagePoint(
      overrides?: CallOverrides
    ): Promise<number>;

    liquidationRatio(overrides?: CallOverrides): Promise<number>;

    mintToUser(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    precisionMultiplier(overrides?: CallOverrides): Promise<number>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayLoan(
      amountXUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAmountToMint(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTestPrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeAdditionalLoan(
      amountToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeLoan(amountOut: BigNumberish, overrides?: CallOverrides): Promise<void>;

    testPrice(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnershipXUSD(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePosition(
      owner: string,
      newCollateralAmount: BigNumberish,
      newBody: BigNumberish,
      newInterest: BigNumberish,
      newBorrowFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAccumelatedFees(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAccumulatedPenalties(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateralFromPosition(
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClosePosition(address,uint256,uint256)"(
      owner?: null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; amount: BigNumber; timestamp: BigNumber }
    >;

    ClosePosition(
      owner?: null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; amount: BigNumber; timestamp: BigNumber }
    >;

    "CreatePosition(address,uint256,uint256,uint256,uint256,uint256)"(
      owner?: string | null,
      liquidationPrice?: BigNumberish | null,
      collateralAmount?: null,
      body?: null,
      borrowFee?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        liquidationPrice: BigNumber;
        collateralAmount: BigNumber;
        body: BigNumber;
        borrowFee: BigNumber;
        timestamp: BigNumber;
      }
    >;

    CreatePosition(
      owner?: string | null,
      liquidationPrice?: BigNumberish | null,
      collateralAmount?: null,
      body?: null,
      borrowFee?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        liquidationPrice: BigNumber;
        collateralAmount: BigNumber;
        body: BigNumber;
        borrowFee: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "Liquidation(address,uint256,uint256)"(
      owner?: null,
      collateralAmount?: null,
      body?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; collateralAmount: BigNumber; body: BigNumber }
    >;

    Liquidation(
      owner?: null,
      collateralAmount?: null,
      body?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; collateralAmount: BigNumber; body: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "UpdatePosition(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      owner?: string | null,
      newLiquidationPrice?: BigNumberish | null,
      newCollateralAmount?: null,
      newBody?: null,
      newInterest?: null,
      newBorrowFee?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        owner: string;
        newLiquidationPrice: BigNumber;
        newCollateralAmount: BigNumber;
        newBody: BigNumber;
        newInterest: BigNumber;
        newBorrowFee: BigNumber;
        timestamp: BigNumber;
      }
    >;

    UpdatePosition(
      owner?: string | null,
      newLiquidationPrice?: BigNumberish | null,
      newCollateralAmount?: null,
      newBody?: null,
      newInterest?: null,
      newBorrowFee?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        owner: string;
        newLiquidationPrice: BigNumber;
        newCollateralAmount: BigNumber;
        newBody: BigNumber;
        newInterest: BigNumber;
        newBorrowFee: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    XUSD(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowFeePercentagePoint(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      _body: BigNumberish,
      _lastUpdateTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateLiquidationPrice(
      amountXUSD: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralPriceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    createNewPosition(
      _sender: string,
      _collateralAmount: BigNumberish,
      _body: BigNumberish,
      _liquidationPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimalsXUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getAccumulatedFees(overrides?: CallOverrides): Promise<BigNumber>;

    getAccumulatedPenalties(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      positionOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(
      _position: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _xusdAddress: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestPercentagePoints(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      positionOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationBonusPercentagePoint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationPenaltyPercentagePoint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    mintToUser(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    precisionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLoan(
      amountXUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAmountToMint(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTestPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeAdditionalLoan(
      amountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeLoan(
      amountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testPrice(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnershipXUSD(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePosition(
      owner: string,
      newCollateralAmount: BigNumberish,
      newBody: BigNumberish,
      newInterest: BigNumberish,
      newBorrowFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAccumelatedFees(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAccumulatedPenalties(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateralFromPosition(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    XUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowFeePercentagePoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterest(
      _body: BigNumberish,
      _lastUpdateTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateLiquidationPrice(
      amountXUSD: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralPriceDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createNewPosition(
      _sender: string,
      _collateralAmount: BigNumberish,
      _body: BigNumberish,
      _liquidationPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimalsXUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccumulatedFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccumulatedPenalties(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      positionOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebt(
      _position: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _xusdAddress: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestPercentagePoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      positionOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationBonusPercentagePoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationPenaltyPercentagePoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintToUser(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precisionMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      amountXUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAmountToMint(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTestPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeAdditionalLoan(
      amountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeLoan(
      amountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnershipXUSD(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePosition(
      owner: string,
      newCollateralAmount: BigNumberish,
      newBody: BigNumberish,
      newInterest: BigNumberish,
      newBorrowFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAccumelatedFees(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAccumulatedPenalties(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateralFromPosition(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
